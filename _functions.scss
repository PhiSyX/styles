@function escape_selector($selector) {
  $escapeChars: (
    "!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ".", "/", ":",
    ";", "<", "=", ">", "?", "@", "[",  "]", "^", "\`", "{", "|", "}", "~",
  );

  @each $escapeChar in $escapeChars {
    $selector: str_replace($selector, $escapeChar, "\\#{$escapeChar}");
  }

  @return $selector;
}

@function first_char($text) {
  @return str-slice($text, 0, 1);
}

@function em($pixels, $context) {
  @if type_of($pixels) == number and unit($pixels) == "%" {
    @return $pixels;
  }

  @if unitless($pixels) {
    $pixels: $pixels * 1px;
  }
  @if unitless($context) {
    $context: $context * 1px;
  }

  @return ($pixels / $context) * 1em;
}

@function rem($pixels, $context) {
  @if type_of($pixels) == number and unit($pixels) == "%" {
    @return $pixels;
  }

  @if unitless($pixels) {
    $pixels: $pixels * 1px;
  }
  @if unitless($context) {
    $context: $context * 1px;
  }

  @return ($pixels / $context) * 1rem;
}


@function str_replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str_replace(
      str-slice($string, $index + str-length($search)),
      $search,
      $replace
    );
  }
  @return $string;
}

@function strip_unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function svg_encode($svg) {
  $len: str-length($svg) + 1;

  $encode: (
    '"': "%22",
    "#": "%23",
    "%": "%25",
    "<": "%3C",
    ">": "%3E",
    "{": "%7B",
    "}": "%7D",
  );

  $string: "";
  $character: "";

  @for $i from 1 to $len {
    $character: str-slice($svg, $i, $i);

    @if index(map-keys($encode), $character) {
      $character: map-get($encode, $character);
    }

    $string: $string + $character;
  }

  @return "data:image/svg+xml," + $string;
}

@function hex2rgb($hexColor) {
  @return "#{red($hexColor)},#{green($hexColor)},#{blue($hexColor)}";
}

@function hex2hsl($hexColor) {
  @return "#{hue($hexColor)},#{saturation($hexColor)},#{lightness($hexColor)}";
}
